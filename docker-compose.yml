version: '3.9'

services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - app-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092, EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092, EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    ports:
      - "5433:5432"
    volumes:
      - ~/apps/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
    networks:
      - app-network
    restart: unless-stopped

  eureka-server:
    container_name: cloud-eureka-discovery-service
    build:
      context: ../cloud-eureka-discovery-service
    ports:
      - "8761:8761"
    networks:
      - app-network

  resource-service:
    container_name: resource-service
    environment:
      - DB_URL_RESOURCE=jdbc:postgresql://postgres:5432/resource_service
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USERNAME=${DB_USERNAME}
      - EUREKA_URL=eureka-server
      - POSTGRES_URL=postgres
      - AWS_ACCESS_KEY=${AWS-ACCESS-KEY}
      - AWS_SECRET_KEY=${AWS-SECRET-KEY}
      - AWS_REGION=us-east-1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    build:
      context: ../resource-service
    ports:
      - "8089:8089"
    depends_on:
      - eureka-server
      - postgres
      - kafka
    networks:
      - app-network

  resource-processor:
    container_name: resource-processor
    environment:
      - EUREKA_URL=eureka-server
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    build:
      context: ../resource-processor
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - kafka
    networks:
      - app-network

  song-service:
    container_name: song-service
    environment:
      - DB_URL_SONG=jdbc:postgresql://postgres:5432/song_service
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USERNAME=${DB_USERNAME}
      - EUREKA_URL=eureka-server
      - POSTGRES_URL=postgres
    build:
      context: .
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - postgres
    networks:
      - app-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  pgadmin: